package boggledApp;


/**
* boggledApp/BoggledPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from corbaIDL.idl
* Tuesday, May 28, 2024 5:11:50 PM SGT
*/

public abstract class BoggledPOA extends org.omg.PortableServer.Servant
 implements boggledApp.BoggledOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("register", new java.lang.Integer (0));
    _methods.put ("login", new java.lang.Integer (1));
    _methods.put ("verifyWord", new java.lang.Integer (2));
    _methods.put ("getPlayerScore", new java.lang.Integer (3));
    _methods.put ("calculateScore", new java.lang.Integer (4));
    _methods.put ("pointsPerWord", new java.lang.Integer (5));
    _methods.put ("createGameSinglePlayer", new java.lang.Integer (6));
    _methods.put ("createGameMultiPlayer", new java.lang.Integer (7));
    _methods.put ("getCharacters", new java.lang.Integer (8));
    _methods.put ("leaveRoom", new java.lang.Integer (9));
    _methods.put ("cancelRoom", new java.lang.Integer (10));
    _methods.put ("startGame", new java.lang.Integer (11));
    _methods.put ("endGame", new java.lang.Integer (12));
    _methods.put ("playerLeft", new java.lang.Integer (13));
    _methods.put ("showListOfRooms", new java.lang.Integer (14));
    _methods.put ("inputRoom", new java.lang.Integer (15));
    _methods.put ("playerJoined", new java.lang.Integer (16));
    _methods.put ("getPlayerAvatar", new java.lang.Integer (17));
    _methods.put ("updatePlayerAvatar", new java.lang.Integer (18));
    _methods.put ("updateCredential", new java.lang.Integer (19));
    _methods.put ("getLeaderboard", new java.lang.Integer (20));
    _methods.put ("submitPts", new java.lang.Integer (21));
    _methods.put ("deleteUser", new java.lang.Integer (22));
    _methods.put ("logout", new java.lang.Integer (23));
    _methods.put ("closeRoom", new java.lang.Integer (24));
    _methods.put ("getHighScore", new java.lang.Integer (25));
    _methods.put ("setHighScore", new java.lang.Integer (26));
    _methods.put ("setTime", new java.lang.Integer (27));
    _methods.put ("setTotalScore", new java.lang.Integer (28));
    _methods.put ("getCurrentGameLeaderboards", new java.lang.Integer (29));
    _methods.put ("checkPlayerJoined", new java.lang.Integer (30));
    _methods.put ("setRoundScore", new java.lang.Integer (31));
    _methods.put ("getRound1Score", new java.lang.Integer (32));
    _methods.put ("getRound2Score", new java.lang.Integer (33));
    _methods.put ("getRound3Score", new java.lang.Integer (34));
    _methods.put ("getRound4Score", new java.lang.Integer (35));
    _methods.put ("getRound5Score", new java.lang.Integer (36));
    _methods.put ("getRound6Score", new java.lang.Integer (37));
    _methods.put ("getRound7Score", new java.lang.Integer (38));
    _methods.put ("getRound8Score", new java.lang.Integer (39));
    _methods.put ("getRound9Score", new java.lang.Integer (40));
    _methods.put ("getRound10Score", new java.lang.Integer (41));
    _methods.put ("sendDone", new java.lang.Integer (42));
    _methods.put ("checkGameDone", new java.lang.Integer (43));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // boggledApp/Boggled/register
       {
         try {
           String username = in.read_string ();
           String password = in.read_string ();
           boolean $result = false;
           $result = this.register (username, password);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (boggledApp.usernameAlreadyExistsException $ex) {
           out = $rh.createExceptionReply ();
           boggledApp.usernameAlreadyExistsExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 1:  // boggledApp/Boggled/login
       {
         try {
           String username = in.read_string ();
           String password = in.read_string ();
           boolean $result = false;
           $result = this.login (username, password);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (boggledApp.userAlreadyLogInException $ex) {
           out = $rh.createExceptionReply ();
           boggledApp.userAlreadyLogInExceptionHelper.write (out, $ex);
         } catch (boggledApp.invalidCredentialsException $ex) {
           out = $rh.createExceptionReply ();
           boggledApp.invalidCredentialsExceptionHelper.write (out, $ex);
         } catch (boggledApp.bannedAccountException $ex) {
           out = $rh.createExceptionReply ();
           boggledApp.bannedAccountExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 2:  // boggledApp/Boggled/verifyWord
       {
         try {
           int roomID = in.read_long ();
           String word = in.read_string ();
           String username = in.read_string ();
           boolean $result = false;
           $result = this.verifyWord (roomID, word, username);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (boggledApp.invalidWordException $ex) {
           out = $rh.createExceptionReply ();
           boggledApp.invalidWordExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 3:  // boggledApp/Boggled/getPlayerScore
       {
         String username = in.read_string ();
         int earnedPts = in.read_long ();
         int $result = (int)0;
         $result = this.getPlayerScore (username, earnedPts);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 4:  // boggledApp/Boggled/calculateScore
       {
         int earnedPts = in.read_long ();
         int $result = (int)0;
         $result = this.calculateScore (earnedPts);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 5:  // boggledApp/Boggled/pointsPerWord
       {
         String word = in.read_string ();
         int $result = (int)0;
         $result = this.pointsPerWord (word);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 6:  // boggledApp/Boggled/createGameSinglePlayer
       {
         String $result[] = null;
         $result = this.createGameSinglePlayer ();
         out = $rh.createReply();
         boggledApp.StringSequenceHelper.write (out, $result);
         break;
       }

       case 7:  // boggledApp/Boggled/createGameMultiPlayer
       {
         String username = in.read_string ();
         int $result[] = null;
         $result = this.createGameMultiPlayer (username);
         out = $rh.createReply();
         boggledApp.LongSequenceHelper.write (out, $result);
         break;
       }

       case 8:  // boggledApp/Boggled/getCharacters
       {
         int roomID = in.read_long ();
         String $result[] = null;
         $result = this.getCharacters (roomID);
         out = $rh.createReply();
         boggledApp.StringSequenceHelper.write (out, $result);
         break;
       }

       case 9:  // boggledApp/Boggled/leaveRoom
       {
         int roomID = in.read_long ();
         String username = in.read_wstring ();
         boolean $result = false;
         $result = this.leaveRoom (roomID, username);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 10:  // boggledApp/Boggled/cancelRoom
       {
         int roomID = in.read_long ();
         boolean $result = false;
         $result = this.cancelRoom (roomID);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 11:  // boggledApp/Boggled/startGame
       {
         String $result[] = null;
         $result = this.startGame ();
         out = $rh.createReply();
         boggledApp.StringSequenceHelper.write (out, $result);
         break;
       }

       case 12:  // boggledApp/Boggled/endGame
       {
         this.endGame ();
         out = $rh.createReply();
         break;
       }

       case 13:  // boggledApp/Boggled/playerLeft
       {
         this.playerLeft ();
         out = $rh.createReply();
         break;
       }

       case 14:  // boggledApp/Boggled/showListOfRooms
       {
         String $result[] = null;
         $result = this.showListOfRooms ();
         out = $rh.createReply();
         boggledApp.StringSequenceHelper.write (out, $result);
         break;
       }

       case 15:  // boggledApp/Boggled/inputRoom
       {
         try {
           int roomId = in.read_long ();
           String username = in.read_string ();
           int $result = (int)0;
           $result = this.inputRoom (roomId, username);
           out = $rh.createReply();
           out.write_long ($result);
         } catch (boggledApp.roomDoesntExistException $ex) {
           out = $rh.createExceptionReply ();
           boggledApp.roomDoesntExistExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 16:  // boggledApp/Boggled/playerJoined
       {
         String username = in.read_string ();
         this.playerJoined (username);
         out = $rh.createReply();
         break;
       }

       case 17:  // boggledApp/Boggled/getPlayerAvatar
       {
         String username = in.read_string ();
         int $result = (int)0;
         $result = this.getPlayerAvatar (username);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 18:  // boggledApp/Boggled/updatePlayerAvatar
       {
         String username = in.read_string ();
         int avatar = in.read_long ();
         boolean $result = false;
         $result = this.updatePlayerAvatar (username, avatar);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 19:  // boggledApp/Boggled/updateCredential
       {
         String username = in.read_string ();
         String password = in.read_string ();
         boolean $result = false;
         $result = this.updateCredential (username, password);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 20:  // boggledApp/Boggled/getLeaderboard
       {
         String $result[] = null;
         $result = this.getLeaderboard ();
         out = $rh.createReply();
         boggledApp.StringSequenceHelper.write (out, $result);
         break;
       }

       case 21:  // boggledApp/Boggled/submitPts
       {
         String username = in.read_string ();
         int pts = in.read_long ();
         this.submitPts (username, pts);
         out = $rh.createReply();
         break;
       }

       case 22:  // boggledApp/Boggled/deleteUser
       {
         String username = in.read_string ();
         boolean $result = false;
         $result = this.deleteUser (username);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 23:  // boggledApp/Boggled/logout
       {
         try {
           String username = in.read_string ();
           boolean $result = false;
           $result = this.logout (username);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (boggledApp.failedLogOutException $ex) {
           out = $rh.createExceptionReply ();
           boggledApp.failedLogOutExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 24:  // boggledApp/Boggled/closeRoom
       {
         try {
           int roomID = in.read_long ();
           this.closeRoom (roomID);
           out = $rh.createReply();
         } catch (boggledApp.roomDoesntExistException $ex) {
           out = $rh.createExceptionReply ();
           boggledApp.roomDoesntExistExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 25:  // boggledApp/Boggled/getHighScore
       {
         String username = in.read_string ();
         int $result = (int)0;
         $result = this.getHighScore (username);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 26:  // boggledApp/Boggled/setHighScore
       {
         String username = in.read_string ();
         int score = in.read_long ();
         int $result = (int)0;
         $result = this.setHighScore (username, score);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 27:  // boggledApp/Boggled/setTime
       {
         int $result = (int)0;
         $result = this.setTime ();
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 28:  // boggledApp/Boggled/setTotalScore
       {
         String username = in.read_string ();
         int score = in.read_long ();
         int roomID = in.read_long ();
         int $result = (int)0;
         $result = this.setTotalScore (username, score, roomID);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 29:  // boggledApp/Boggled/getCurrentGameLeaderboards
       {
         int roomID = in.read_long ();
         String $result[] = null;
         $result = this.getCurrentGameLeaderboards (roomID);
         out = $rh.createReply();
         boggledApp.StringSequenceHelper.write (out, $result);
         break;
       }

       case 30:  // boggledApp/Boggled/checkPlayerJoined
       {
         int roomID = in.read_long ();
         boolean $result = false;
         $result = this.checkPlayerJoined (roomID);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 31:  // boggledApp/Boggled/setRoundScore
       {
         String username = in.read_string ();
         int score = in.read_long ();
         int roomID = in.read_long ();
         this.setRoundScore (username, score, roomID);
         out = $rh.createReply();
         break;
       }

       case 32:  // boggledApp/Boggled/getRound1Score
       {
         int roomID = in.read_long ();
         String $result[] = null;
         $result = this.getRound1Score (roomID);
         out = $rh.createReply();
         boggledApp.StringSequenceHelper.write (out, $result);
         break;
       }

       case 33:  // boggledApp/Boggled/getRound2Score
       {
         int roomID = in.read_long ();
         String $result[] = null;
         $result = this.getRound2Score (roomID);
         out = $rh.createReply();
         boggledApp.StringSequenceHelper.write (out, $result);
         break;
       }

       case 34:  // boggledApp/Boggled/getRound3Score
       {
         int roomID = in.read_long ();
         String $result[] = null;
         $result = this.getRound3Score (roomID);
         out = $rh.createReply();
         boggledApp.StringSequenceHelper.write (out, $result);
         break;
       }

       case 35:  // boggledApp/Boggled/getRound4Score
       {
         int roomID = in.read_long ();
         String $result[] = null;
         $result = this.getRound4Score (roomID);
         out = $rh.createReply();
         boggledApp.StringSequenceHelper.write (out, $result);
         break;
       }

       case 36:  // boggledApp/Boggled/getRound5Score
       {
         int roomID = in.read_long ();
         String $result[] = null;
         $result = this.getRound5Score (roomID);
         out = $rh.createReply();
         boggledApp.StringSequenceHelper.write (out, $result);
         break;
       }

       case 37:  // boggledApp/Boggled/getRound6Score
       {
         int roomID = in.read_long ();
         String $result[] = null;
         $result = this.getRound6Score (roomID);
         out = $rh.createReply();
         boggledApp.StringSequenceHelper.write (out, $result);
         break;
       }

       case 38:  // boggledApp/Boggled/getRound7Score
       {
         int roomID = in.read_long ();
         String $result[] = null;
         $result = this.getRound7Score (roomID);
         out = $rh.createReply();
         boggledApp.StringSequenceHelper.write (out, $result);
         break;
       }

       case 39:  // boggledApp/Boggled/getRound8Score
       {
         int roomID = in.read_long ();
         String $result[] = null;
         $result = this.getRound8Score (roomID);
         out = $rh.createReply();
         boggledApp.StringSequenceHelper.write (out, $result);
         break;
       }

       case 40:  // boggledApp/Boggled/getRound9Score
       {
         int roomID = in.read_long ();
         String $result[] = null;
         $result = this.getRound9Score (roomID);
         out = $rh.createReply();
         boggledApp.StringSequenceHelper.write (out, $result);
         break;
       }

       case 41:  // boggledApp/Boggled/getRound10Score
       {
         int roomID = in.read_long ();
         String $result[] = null;
         $result = this.getRound10Score (roomID);
         out = $rh.createReply();
         boggledApp.StringSequenceHelper.write (out, $result);
         break;
       }

       case 42:  // boggledApp/Boggled/sendDone
       {
         int roomID = in.read_long ();
         this.sendDone (roomID);
         out = $rh.createReply();
         break;
       }

       case 43:  // boggledApp/Boggled/checkGameDone
       {
         int roomID = in.read_long ();
         boolean $result = false;
         $result = this.checkGameDone (roomID);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:boggledApp/Boggled:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Boggled _this() 
  {
    return BoggledHelper.narrow(
    super._this_object());
  }

  public Boggled _this(org.omg.CORBA.ORB orb) 
  {
    return BoggledHelper.narrow(
    super._this_object(orb));
  }


} // class BoggledPOA
