package View;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import Client.Controller;
import Server.servant;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.*;
import java.util.List;

/**
 *
 * @author Username
 */
public class Game extends javax.swing.JFrame {
    private String allWordsMade;
    private javax.swing.Timer timer;
    public Integer remainingSeconds;
//    String currentUsername = servant.getCurrentUsername();

    public void setRemainingSeconds(int remainingSeconds) {
        this.remainingSeconds = remainingSeconds;
    }

    /**
     * Creates new form Game
     */
    public Game() {
        initComponents();
        SwingUtilities.invokeLater(() -> {
            Controller.getInstance().setTime();
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        btnletter1 = new javax.swing.JButton();
        btnletter2 = new javax.swing.JButton();
        btnletter3 = new javax.swing.JButton();
        btnletter4 = new javax.swing.JButton();
        btnletter6 = new javax.swing.JButton();
        btnletter11 = new javax.swing.JButton();
        btnletter5 = new javax.swing.JButton();
        btnletter7 = new javax.swing.JButton();
        btnletter8 = new javax.swing.JButton();
        btnletter12 = new javax.swing.JButton();
        btnletter9 = new javax.swing.JButton();
        btnletter14 = new javax.swing.JButton();
        btnletter13 = new javax.swing.JButton();
        btnletter10 = new javax.swing.JButton();
        btnletter15 = new javax.swing.JButton();
        btnletter16 = new javax.swing.JButton();
        btnletter17 = new javax.swing.JButton();
        btnletter18 = new javax.swing.JButton();
        btnletter19 = new javax.swing.JButton();
        btnletter20 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnDone = new javax.swing.JButton();
        tfTime = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        WordsTextArea = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        wordsMade = new javax.swing.JTextArea();
        avatar = new javax.swing.JLabel();
        username = new javax.swing.JLabel();
        shufflebtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(null);

        btnletter1.setBackground(new java.awt.Color(204, 255, 255));
        btnletter1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jPanel1.add(btnletter1);
        btnletter1.setBounds(50, 240, 72, 60);

        btnletter2.setBackground(new java.awt.Color(204, 255, 255));
        btnletter2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jPanel1.add(btnletter2);
        btnletter2.setBounds(130, 240, 72, 60);

        btnletter3.setBackground(new java.awt.Color(204, 255, 255));
        btnletter3.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnletter3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnletter3ActionPerformed(evt);
            }
        });
        jPanel1.add(btnletter3);
        btnletter3.setBounds(210, 240, 72, 60);

        btnletter4.setBackground(new java.awt.Color(204, 255, 255));
        btnletter4.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnletter4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnletter4ActionPerformed(evt);
            }
        });
        jPanel1.add(btnletter4);
        btnletter4.setBounds(290, 240, 72, 60);

        btnletter6.setBackground(new java.awt.Color(204, 255, 255));
        btnletter6.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnletter6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnletter6ActionPerformed(evt);
            }
        });
        jPanel1.add(btnletter6);
        btnletter6.setBounds(50, 310, 72, 60);

        btnletter11.setBackground(new java.awt.Color(204, 255, 255));
        btnletter11.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnletter11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnletter11ActionPerformed(evt);
            }
        });
        jPanel1.add(btnletter11);
        btnletter11.setBounds(50, 380, 72, 60);

        btnletter5.setBackground(new java.awt.Color(204, 255, 255));
        btnletter5.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnletter5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnletter5ActionPerformed(evt);
            }
        });
        jPanel1.add(btnletter5);
        btnletter5.setBounds(370, 240, 72, 60);

        btnletter7.setBackground(new java.awt.Color(204, 255, 255));
        btnletter7.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnletter7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnletter7ActionPerformed(evt);
            }
        });
        jPanel1.add(btnletter7);
        btnletter7.setBounds(130, 310, 72, 60);

        btnletter8.setBackground(new java.awt.Color(204, 255, 255));
        btnletter8.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnletter8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnletter8ActionPerformed(evt);
            }
        });
        jPanel1.add(btnletter8);
        btnletter8.setBounds(210, 310, 72, 60);

        btnletter12.setBackground(new java.awt.Color(204, 255, 255));
        btnletter12.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnletter12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnletter12ActionPerformed(evt);
            }
        });
        jPanel1.add(btnletter12);
        btnletter12.setBounds(130, 380, 72, 60);

        btnletter9.setBackground(new java.awt.Color(204, 255, 255));
        btnletter9.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnletter9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnletter9ActionPerformed(evt);
            }
        });
        jPanel1.add(btnletter9);
        btnletter9.setBounds(290, 310, 72, 60);

        btnletter14.setBackground(new java.awt.Color(204, 255, 255));
        btnletter14.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnletter14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnletter14ActionPerformed(evt);
            }
        });
        jPanel1.add(btnletter14);
        btnletter14.setBounds(290, 380, 72, 60);

        btnletter13.setBackground(new java.awt.Color(204, 255, 255));
        btnletter13.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnletter13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnletter13ActionPerformed(evt);
            }
        });
        jPanel1.add(btnletter13);
        btnletter13.setBounds(210, 380, 72, 60);

        btnletter10.setBackground(new java.awt.Color(204, 255, 255));
        btnletter10.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnletter10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnletter10ActionPerformed(evt);
            }
        });
        jPanel1.add(btnletter10);
        btnletter10.setBounds(370, 310, 72, 60);

        btnletter15.setBackground(new java.awt.Color(204, 255, 255));
        btnletter15.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnletter15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnletter15ActionPerformed(evt);
            }
        });
        jPanel1.add(btnletter15);
        btnletter15.setBounds(370, 380, 72, 60);

        btnletter16.setBackground(new java.awt.Color(204, 255, 255));
        btnletter16.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnletter16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnletter16ActionPerformed(evt);
            }
        });
        jPanel1.add(btnletter16);
        btnletter16.setBounds(50, 460, 72, 60);

        btnletter17.setBackground(new java.awt.Color(204, 255, 255));
        btnletter17.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnletter17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnletter17ActionPerformed(evt);
            }
        });
        jPanel1.add(btnletter17);
        btnletter17.setBounds(130, 460, 72, 60);

        btnletter18.setBackground(new java.awt.Color(204, 255, 255));
        btnletter18.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnletter18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnletter18ActionPerformed(evt);
            }
        });
        jPanel1.add(btnletter18);
        btnletter18.setBounds(210, 460, 72, 60);

        btnletter19.setBackground(new java.awt.Color(204, 255, 255));
        btnletter19.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnletter19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnletter19ActionPerformed(evt);
            }
        });
        jPanel1.add(btnletter19);
        btnletter19.setBounds(290, 460, 72, 60);

        btnletter20.setBackground(new java.awt.Color(204, 255, 255));
        btnletter20.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnletter20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnletter20ActionPerformed(evt);
            }
        });
        jPanel1.add(btnletter20);
        btnletter20.setBounds(370, 460, 72, 60);

        jLabel2.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        jLabel2.setText("Put Words Here:");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(50, 160, 120, 20);

        btnDone.setBackground(new java.awt.Color(51, 255, 51));
        btnDone.setText("Submit");
        jPanel1.add(btnDone);
        btnDone.setBounds(360, 180, 100, 30);

        btnDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoneActionPerformed(evt);
            }
        });

        tfTime.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfTime.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jPanel1.add(tfTime);
        tfTime.setBounds(360, 40, 110, 30);
        tfTime.setEditable(false);

        jLabel3.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        jLabel3.setText("Time:");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(360, 20, 40, 20);

        WordsTextArea.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPanel1.add(WordsTextArea);
        WordsTextArea.setBounds(50, 180, 300, 30);
        attachTextAreaListener();

        wordsMade.setColumns(20);
        wordsMade.setRows(5);
        wordsMade.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jScrollPane1.setViewportView(wordsMade);
        wordsMade.setEditable(false);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(50, 540, 390, 90);

        avatar.setBackground(new java.awt.Color(255, 255, 255));
        avatar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jPanel1.add(avatar);
        avatar.setBounds(10, 20, 50, 50);

        username.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
//        username.setText(currentUsername);
        jPanel1.add(username);
        username.setBounds(80, 40, 80, 18);

//        shufflebtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shuffle.png"))); // NOI18N
//        jPanel1.add(shufflebtn);
//        shufflebtn.setBounds(10, 180, 30, 30);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/trophy2.png"))); // NOI18N
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/trophy2.png")));
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/trophy2.png")));
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawfont.gif")));
        jPanel1.add(jLabel5);
        jPanel1.add(jLabel6);
        jPanel1.add(jLabel7);
        jPanel1.add(jLabel8);
        jLabel5.setBounds(60, 40, 200, 128);
        jLabel6.setBounds(120, 40, 200, 128);
        jLabel7.setBounds(180, 40, 200, 128);
        jLabel8.setBounds(-90, -90, 480, 270);
        jLabel5.setVisible(false);
        jLabel6.setVisible(false);
        jLabel7.setVisible(false);
        jLabel8.setVisible(false);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/download.jpg"))); // NOI18N
        jPanel1.add(jLabel4);
        jLabel4.setBounds(0, 0, 490, 710);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 710, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnletter20ActionPerformed
        String words = WordsTextArea.getText();
        Controller.getInstance().handleSubmittedWords(words);
    }

    private void btnletter20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnletter20ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnletter20ActionPerformed

    private void btnletter19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnletter19ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnletter19ActionPerformed

    private void btnletter18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnletter18ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnletter18ActionPerformed

    private void btnletter17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnletter17ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnletter17ActionPerformed

    private void btnletter16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnletter16ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnletter16ActionPerformed

    private void btnletter15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnletter15ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnletter15ActionPerformed

    private void btnletter10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnletter10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnletter10ActionPerformed

    private void btnletter13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnletter13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnletter13ActionPerformed

    private void btnletter14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnletter14ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnletter14ActionPerformed

    private void btnletter9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnletter9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnletter9ActionPerformed

    private void btnletter12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnletter12ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnletter12ActionPerformed

    private void btnletter8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnletter8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnletter8ActionPerformed

    private void btnletter7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnletter7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnletter7ActionPerformed

    private void btnletter5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnletter5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnletter5ActionPerformed

    private void btnletter11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnletter11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnletter11ActionPerformed

    private void btnletter6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnletter6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnletter6ActionPerformed

    private void btnletter4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnletter4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnletter4ActionPerformed

    private void btnletter3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnletter3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnletter3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Game().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField WordsTextArea;
    public javax.swing.JLabel avatar;
    private javax.swing.JButton btnDone;
    private javax.swing.JButton btnletter1;
    private javax.swing.JButton btnletter10;
    private javax.swing.JButton btnletter11;
    private javax.swing.JButton btnletter12;
    private javax.swing.JButton btnletter13;
    private javax.swing.JButton btnletter14;
    private javax.swing.JButton btnletter15;
    private javax.swing.JButton btnletter16;
    private javax.swing.JButton btnletter17;
    private javax.swing.JButton btnletter18;
    private javax.swing.JButton btnletter19;
    private javax.swing.JButton btnletter2;
    private javax.swing.JButton btnletter20;
    private javax.swing.JButton btnletter3;
    private javax.swing.JButton btnletter4;
    private javax.swing.JButton btnletter5;
    private javax.swing.JButton btnletter6;
    private javax.swing.JButton btnletter7;
    private javax.swing.JButton btnletter8;
    private javax.swing.JButton btnletter9;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    public javax.swing.JLabel jLabel5;
    public javax.swing.JLabel jLabel6;
    public javax.swing.JLabel jLabel7;
    public javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton shufflebtn;
    private javax.swing.JTextField tfTime;
    public javax.swing.JLabel username;
    private javax.swing.JTextArea wordsMade;
    // End of variables declaration//GEN-END:variables

    // Declare the array
    private JButton[] letterButtons = new JButton[20];

    // Initialize the buttons and add them to the array
    private void initializeLetterButtons() {
        letterButtons[0] = btnletter1;
        letterButtons[1] = btnletter2;
        letterButtons[2] = btnletter3;
        letterButtons[3] = btnletter4;
        letterButtons[4] = btnletter5;
        letterButtons[5] = btnletter6;
        letterButtons[6] = btnletter7;
        letterButtons[7] = btnletter8;
        letterButtons[8] = btnletter9;
        letterButtons[9] = btnletter10;
        letterButtons[10] = btnletter11;
        letterButtons[11] = btnletter12;
        letterButtons[12] = btnletter13;
        letterButtons[13] = btnletter14;
        letterButtons[14] = btnletter15;
        letterButtons[15] = btnletter16;
        letterButtons[16] = btnletter17;
        letterButtons[17] = btnletter18;
        letterButtons[18] = btnletter19;
        letterButtons[19] = btnletter20;
    }

    public void displayWordPoints(String word, int points) {
        boolean allLettersMarked = areAllLettersMarked(word);
        if (!allLettersMarked) {
            // If not all letters are marked, consider it as zero points and declare as invalid word
            points = 0;
            // word += " (Invalid Word)";
        }
        String message = word;
        // Assuming you have a JTextArea named wordsMade to display the words and points
        allWordsMade += message + '\n';
        wordsMade.append(message + "\n");
    }

    public String resetAllWordsMade() {
        this.allWordsMade = "";
        return allWordsMade;
    }

    public String getGameSummary() {
        // Remove any occurrence of "null" from the message
        String cleanedMessage = allWordsMade.replaceAll("null", "");

        // Return the cleaned message
        return cleanedMessage;
    }

    // Method to check if all letters in the word are marked
    public boolean areAllLettersMarked(String word) {
        for (char letter : word.toCharArray()) {
            if (!isButtonMarkedForLetter(letter)) { // Assuming there's a method to check if a button is marked for a letter
                return false;
            }
        }
        return true;
    }

    public boolean isButtonMarkedForLetter(char letter) {
        // Loop through the letterButtons array and check if any button is marked for the given letter
        for (JButton button : letterButtons) {
            if (button != null && button.getText().equalsIgnoreCase(String.valueOf(letter)) && button.getBackground().equals(new Color(115, 120, 120))) {
                // Assuming the marked color is (115, 120, 120)
                return true;
            }
        }
        return false; // If no button is marked for the given letter
    }

    public void markUsedLetters(String word) {
        System.out.println("markUsedLetters method called with word: " + word);

            Map<Character, Set<Integer>> usedButtonIndices = new HashMap<>();

        // Loop through each letter of the submitted word
        for (int i = 0; i < word.length(); i++) {
            char letter = Character.toLowerCase(word.charAt(i)); // Convert to lowercase for case-insensitive comparison
            System.out.println("Processing letter: " + letter);

            Set<Integer> letterUsedIndices = usedButtonIndices.getOrDefault(letter, new HashSet<>());


            // Flag to check if a match is found
            boolean matchFound = false;

            // Loop through the buttons until a match is found
            for (int j = 0; j < letterButtons.length; j++) {
                if (!letterUsedIndices.contains(j)) { // Check if this button index is not already used for this letter
                    JButton btn = letterButtons[j];
                    if (btn != null) {
                        String buttonText = btn.getText();
                        if (buttonText != null && !matchFound) { // Check if match is not already found
                            // Compare the button text with the letter
                            boolean match = buttonText.equalsIgnoreCase(String.valueOf(letter));
                            if (match) {
                                System.out.println("Button Text: " + buttonText + ", Button Name: btnletter" + (j + 1) + ", Matched letter: " + letter);
                                btn.setBackground(new java.awt.Color(115, 120, 120)); // Change background color
                                matchFound = true; // Set flag to true to indicate match found
                                letterUsedIndices.add(j); // Mark this button index as used for this letter
                            }
                        }
                    }
                }
            }
            // Update the usedButtonIndices map for this letter
            usedButtonIndices.put(letter, letterUsedIndices);
        }
    }




//    private boolean isLetterUsed(String letter) {
//        String word = textAreaWords.getText();
//        return word.contains(letter);
//    }

    private Stack<Game.CharacterIndexPair> charStack = new Stack<>();

    private DocumentListener textAreaListener = new DocumentListener() {
        @Override
        public void insertUpdate(DocumentEvent e) {
            try {
                String insertedText = e.getDocument().getText(e.getOffset(), e.getLength());
                for (int i = 0; i < insertedText.length(); i++) {
                    char letter = insertedText.charAt(i);
                    System.out.println("Inserted character: " + letter);
                    markButtonAsUsed(letter);
                    charStack.push(new Game.CharacterIndexPair(letter, e.getOffset() + i)); // Push character and its index onto the stack
                }
            } catch (BadLocationException ex) {
                ex.printStackTrace();
            }
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            int deletionIndex = e.getOffset();
            if (!charStack.isEmpty()) { // Check if the stack is not empty
                // Pop the character from the stack based on the desired index
                char deletedChar = popCharacterAt(deletionIndex);
                System.out.println("Deleted character: " + deletedChar);
                resetButtonBackground(deletedChar); // Pass the deleted character
                // Adjust the index of characters in the stack after deletion
                adjustIndexAfterDeletion(deletionIndex);
            }
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            // Not used for plain text components like JTextArea
        }
    };

    // Method to pop the character from the stack at the specified index
    private char popCharacterAt(int deletionIndex) {
        Stack<Game.CharacterIndexPair> tempStack = new Stack<>();
        char deletedChar = '\0';
        while (!charStack.isEmpty()) {
            Game.CharacterIndexPair pair = charStack.pop();
            if (pair.getIndex() != deletionIndex) {
                tempStack.push(pair);
            } else {
                deletedChar = pair.getCharacter();
                break;
            }
        }
        // Restore characters back to the main stack
        while (!tempStack.isEmpty()) {
            charStack.push(tempStack.pop());
        }
        return deletedChar;
    }

    // Method to adjust the index of characters in the stack after deletion
    private void adjustIndexAfterDeletion(int deletionIndex) {
        for (Game.CharacterIndexPair pair : charStack) {
            if (pair.getIndex() > deletionIndex) {
                pair.setIndex(pair.getIndex() - 1);
            }
        }
    }

    // Helper class to store character along with its index
    private static class CharacterIndexPair {
        private char character;
        private int index;

        public CharacterIndexPair(char character, int index) {
            this.character = character;
            this.index = index;
        }

        public char getCharacter() {
            return character;
        }

        public int getIndex() {
            return index;
        }

        public void setIndex(int index) {
            this.index = index;
        }
    }

    private Map<Character, Set<Integer>> usedButtonIndices = new HashMap<>();
    private void markButtonAsUsed(char letter) {
        // Iterate over letterButtons and find the first available button for the letter
        for (int i = 0; i < letterButtons.length; i++) {
            JButton btn = letterButtons[i];
            if (btn != null && btn.getText().equalsIgnoreCase(String.valueOf(letter)) && !isButtonUsedForLetter(i, letter)) {
                btn.setBackground(Color.gray); // Change background color of the button
                addUsedButtonForLetter(i, letter); // Mark this button as used for the letter
                return; // Exit loop after the first match
            }
        }
    }

    // Method to check if a button index has already been used for a letter
    private boolean isButtonUsedForLetter(int buttonIndex, char letter) {
        Set<Integer> usedIndices = usedButtonIndices.getOrDefault(letter, new HashSet<>());
        return usedIndices.contains(buttonIndex);
    }

    // Method to mark a button index as used for a letter
    private void addUsedButtonForLetter(int buttonIndex, char letter) {
        Set<Integer> usedIndices = usedButtonIndices.getOrDefault(letter, new HashSet<>());
        usedIndices.add(buttonIndex);
        usedButtonIndices.put(letter, usedIndices);
    }

    private void resetButtonBackground(char letter) {
        // Get the set of button indices associated with the given letter
        Set<Integer> usedIndices = usedButtonIndices.getOrDefault(letter, new HashSet<>());

        // Find the last marked button associated with the given letter
        int lastIndex = -1;
        for (Integer index : usedIndices) {
            if (index > lastIndex) {
                lastIndex = index;
            }
        }

        // Unmark the last button if found
        if (lastIndex != -1) {
            JButton lastBtn = letterButtons[lastIndex];
            if (lastBtn != null) {
                lastBtn.setBackground(new Color(204, 255, 255)); // Reset background color of the button
                usedIndices.remove(lastIndex); // Remove the association for the last button
            }
        }

        // Update the set of button indices associated with the given letter
        usedButtonIndices.put(letter, usedIndices);
    }
    private Map<String, Integer> letterUsageMap = new HashMap<>();
    private void attachTextAreaListener() {
        WordsTextArea.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                // No action needed on insert, filtering will handle it
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                handleBackspace(e);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                // Plain text components don't fire these events
            }
        });

        ((AbstractDocument) WordsTextArea.getDocument()).setDocumentFilter(new DocumentFilter() {
            @Override
            public void insertString(FilterBypass fb, int offset, String string, AttributeSet attr) throws BadLocationException {
                if (isValidCharacter(string)) {
                    super.insertString(fb, offset, string, attr);
                }
            }

            @Override
            public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
                if (isValidCharacter(text)) {
                    super.replace(fb, offset, length, text, attrs);
                }
            }
        });

        WordsTextArea.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    String words = WordsTextArea.getText().trim();
                    if (!words.isEmpty()) {
                        // Simulate the button click event
                        btnDoneActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, ""));
                    }
                }
            }
        });
    }

    private void handleBackspace(DocumentEvent e) {
        try {
            String text = e.getDocument().getText(0, e.getDocument().getLength());
            resetLetterUsage(); // Reset the usage map

            // Re-validate the current text to update the usage map correctly
            isValidCharacter(text);
        } catch (BadLocationException ex) {
            ex.printStackTrace();
        }
    }

    private boolean isValidCharacter(String text) {
        Map<String, Integer> tempLetterUsageMap = new HashMap<>(letterUsageMap);

        char[] chars = text.toCharArray();
        for (char c : chars) {
            String charStr = String.valueOf(c).toLowerCase();
            boolean valid = false;
            for (JButton btn : letterButtons) {
                if (btn != null && btn.getText().equalsIgnoreCase(charStr)) {
                    int usedCount = tempLetterUsageMap.getOrDefault(charStr, 0);
                    if (usedCount < countButtonOccurrences(charStr)) {
                        tempLetterUsageMap.put(charStr, usedCount + 1);
                        valid = true;
                        break;
                    }
                }
            }
            if (!valid) {
                return false;
            }
        }

        letterUsageMap = tempLetterUsageMap;
        return true;
    }

    private int countButtonOccurrences(String letter) {
        int count = 0;
        for (JButton btn : letterButtons) {
            if (btn != null && btn.getText().equalsIgnoreCase(letter)) {
                count++;
            }
        }
        return count;
    }

    private void resetLetterUsage() {
        letterUsageMap.clear();
    }

    private Set<String> usedLetters = new HashSet<>();

    private boolean isLetterUsed(String letter) {
        return usedLetters.contains(letter.toLowerCase());
    }

    private void markLetterAsUsed(String letter) {
        usedLetters.add(letter.toLowerCase());
    }

    public void updateButtonBackgrounds() {
        SwingUtilities.invokeLater(() -> {
            initializeLetterButtons(); // Ensure letterButtons array is initialized
            for (int i = 0; i < letterButtons.length; i++) {
                if (letterButtons[i] != null) { // Check if the button at index i is not null
                    if (isLetterUsed(letterButtons[i].getText())) {
                        letterButtons[i].setBackground(new java.awt.Color(115, 120, 120));
                    } else {
                        letterButtons[i].setBackground(new java.awt.Color(204, 255, 255)); // Reset to default color
                    }
                } else {
                    System.out.println("Button at index " + i + " is null"); // Print debug message if button is null
                }
            }
        });
    }


    public void updateLetterButtons(String[] letters) {
        SwingUtilities.invokeLater(() -> {
            // Collections.shuffle(Arrays.asList(letters));
            for (int i = 0; i < letters.length && i < letterButtons.length; i++) {
                switch (i) {
                    case 0:
                        btnletter1.setText(letters[i]);
                        break;
                    case 1:
                        btnletter2.setText(letters[i]);
                        break;
                    case 2:
                        btnletter3.setText(letters[i]);
                        break;
                    case 3:
                        btnletter4.setText(letters[i]);
                        break;
                    case 4:
                        btnletter5.setText(letters[i]);
                        break;
                    case 5:
                        btnletter6.setText(letters[i]);
                        break;
                    case 6:
                        btnletter7.setText(letters[i]);
                        break;
                    case 7:
                        btnletter8.setText(letters[i]);
                        break;
                    case 8:
                        btnletter9.setText(letters[i]);
                        break;
                    case 9:
                        btnletter10.setText(letters[i]);
                        break;
                    case 10:
                        btnletter11.setText(letters[i]);
                        break;
                    case 11:
                        btnletter12.setText(letters[i]);
                        break;
                    case 12:
                        btnletter13.setText(letters[i]);
                        break;
                    case 13:
                        btnletter14.setText(letters[i]);
                        break;
                    case 14:
                        btnletter15.setText(letters[i]);
                        break;
                    case 15:
                        btnletter16.setText(letters[i]);
                        break;
                    case 16:
                        btnletter17.setText(letters[i]);
                        break;
                    case 17:
                        btnletter18.setText(letters[i]);
                        break;
                    case 18:
                        btnletter19.setText(letters[i]);
                        break;
                    case 19:
                        btnletter20.setText(letters[i]);
                        break;
                    default:
                        break;
                }
            }
        });
    }


    public void startTimer() {
     if(remainingSeconds == 0) {
         remainingSeconds = 60;
     }
        timer = new javax.swing.Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                remainingSeconds--;
                if (remainingSeconds >= 0) {
                    updateTimerDisplay();
                } else {
                    timer.stop();
                    onTimerEnd();
                }
            }
        });
        timer.start();
    }

    private void updateTimerDisplay() {
        int minutes = remainingSeconds / 60;
        int seconds = remainingSeconds % 60;
        String timeString = String.format("%02d:%02d", minutes, seconds);
        tfTime.setText(timeString);
    }

    private ArrayList<Integer> wordPointsList = new ArrayList<>();

    public int computeTotalScore() {
        int totalScore = 0;
        for (Integer points : wordPointsList) {
            totalScore += points;
        }
        return totalScore;
    }

    public void displayTotalScore(String totalScore) {
        // Extract numeric part of the total score string
        String numericPart = totalScore.replaceAll("[^0-9]", "");

        // Parse the numeric part as an integer
        int score = Integer.parseInt(numericPart);

        String message = "Total Score: " + score;
        wordsMade.append(message + "\n"); // Append the total score to the JTextArea
    }


    private void handleTimerCompletion() {
        int totalScore = computeTotalScore();
        displayTotalScore(String.valueOf(totalScore));
    }

    private void onTimerEnd() {
        Controller.handleTimerCompletion(); 
    }

    public void reset() {
        // Reset all components and variables related to the game
        tfTime.setText("00:00"); // Reset timer display
        WordsTextArea.setText("");
        wordsMade.setText(""); // Clear the words made JTextArea
        remainingSeconds = 0; // Reset remaining seconds
        if (timer != null) {
            timer.stop(); // Stop the timer if it's running
        }
        clearButtonBackgrounds(); // Clear button backgrounds
        clearUsedButtonIndices(); // Clear used button indices
    }

    private void clearButtonBackgrounds() {
        for (JButton button : letterButtons) {
            if (button != null) {
                button.setBackground(new Color(204, 255, 255)); // Reset button background color
            }
        }
    }

    private void clearUsedButtonIndices() {
        usedButtonIndices.clear(); // Clear the map containing used button indices
    }
    
    //other method ko 
    // private void attachTextAreaListener() {
    //     WordsTextArea.getDocument().addDocumentListener(textAreaListener);
    //     WordsTextArea.addKeyListener(new KeyAdapter() {
    //         @Override
    //         public void keyPressed(KeyEvent e) {
    //             if (e.getKeyCode() == KeyEvent.VK_ENTER) {
    //                 String words = WordsTextArea.getText().trim();
    //                 if (!words.isEmpty()) {
    //                     // Simulate the button click event
    //                     btnDoneActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, ""));
    //                 }
    //             }
    //         }
    //     });
    // }
}